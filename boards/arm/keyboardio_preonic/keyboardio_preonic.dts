/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include "keyboardio_preonic-layouts.dtsi"

/ {
	model = "preonic";
	compatible = "keyboardio,preonic";

	chosen {
		zephyr,code-partition = &code_partition;
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zmk,battery = &fuelgauge;
		zmk,underglow = &butterfly;
		zmk,kscan = &kscan;
        zmk,physical-layout = &mit_layout;
	};

	ortho_transform: ortho_transform {
		compatible = "zmk,matrix-transform";
		rows = <4>;
		columns = <12>;

		map = <
	                                                                        RC(0,9) RC(0,10) RC(0,11)
	RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
	RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
	RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
	RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
	RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5) RC(5,6) RC(5,7) RC(5,8) RC(5,9) RC(5,10) RC(5,11)
	>;
	};

	mit_transform: mit_transform {
		compatible = "zmk,matrix-transform";
		rows = <4>;
		columns = <12>;

		map = <
	                                                                        RC(0,9) RC(0,10) RC(0,11)
	RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
	RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
	RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
	RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
	RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4)     RC(5,6)     RC(5,7) RC(5,8) RC(5,9) RC(5,10) RC(5,11)
	>;
	};

	kscan: kscan {
		compatible = "zmk,kscan-gpio-matrix";

		wakeup-source;

		diode-direction = "col2row";

		col-gpios
			= <&gpio1 14 (GPIO_ACTIVE_HIGH)>
			, <&gpio1 12 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 25 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 26 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 21 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 23 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 12 (GPIO_ACTIVE_HIGH)>
			, <&gpio1 9  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 4  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 31 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 30 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 29 (GPIO_ACTIVE_HIGH)>
			;

		row-gpios
			= <&gpio1 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio1 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 27 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			;
	};

    // There are 3 available spots where an encoder can be installed.
    // However, the default factory layout only uses one, so by default,
    // only one is enabled here.

    encoder1: encoder1 {
        compatible = "alps,ec11";
        a-gpios = <&gpio1 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&gpio1 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        steps = <80>;
        status = "disabled";
    };

    encoder2: encoder2 {
        compatible = "alps,ec11";
        a-gpios = <&gpio1 3  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        steps = <80>;
        status = "disabled";
    };

    encoder3: encoder3 {
        compatible = "alps,ec11";
        a-gpios = <&gpio0 28 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 2  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        steps = <80>;
        status = "okay";
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        status = "okay";
        sensors = <&encoder3>;
        triggers-per-rotation = <20>;
    };
};

&pinctrl {
       i2c0_default: i2c0_default {
               group1 {
                       psels = <NRF_PSEL(TWIM_SDA, 0, 7)>,
                               <NRF_PSEL(TWIM_SCL, 0, 5)>;
               };
       };

       i2c0_sleep: i2c0_sleep {
               group1 {
                       psels = <NRF_PSEL(TWIM_SDA, 0, 7)>,
                               <NRF_PSEL(TWIM_SCL, 0, 5)>;
                       low-power-enable;
               };
       };

       spi3_default: spi3_default {
               group1 {
                       psels = <NRF_PSEL(SPIM_MOSI, 0, 24)>;
               };
       };

       spi3_sleep: spi3_sleep {
               group1 {
                       psels = <NRF_PSEL(SPIM_MOSI, 0, 24)>;
                       low-power-enable;
               };
       };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";

    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    butterfly: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        reg = <0>;
        spi-max-frequency = <4000000>;

        chain-length = <4>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN
                         LED_COLOR_ID_RED
                         LED_COLOR_ID_BLUE>;
    };
};


&i2c0 {
	status = "okay";
	compatible = "nordic,nrf-twim";
	pinctrl-0 = <&i2c0_default>;
	pinctrl-1 = <&i2c0_sleep>;
	pinctrl-names = "default", "sleep";
	clock-frequency = <100000>;

	fuelgauge: max17048@36 {
		compatible = "zmk,maxim-max17048";
		reg = <0x36>;
	};
};

&adc {
	status = "okay";
};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
    butterfly_power: ext_power_gpio {
        compatible = "zmk,ext-power-generic";
        status = "okay";
        control-gpios = <&gpio1 5 GPIO_ACTIVE_HIGH>;
    };
};


zephyr_udc0: &usbd {
	status = "okay";
};

&flash0 {
	/*
	 * For more information, see:
	 * http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
	 */
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
		    reg = <0x00000000 0x00026000>;
		};
		code_partition: partition@26000 {
		    reg = <0x00026000 0x000c6000>;
		};

		/*
		 * The flash starting at 0x000ec000 and ending at
		 * 0x000f3fff is reserved for use by the application.
		 */

		/*
		 * Storage partition will be used by FCB/LittleFS/NVS
		 * if enabled.
		 */
		storage_partition: partition@ec000 {
		    reg = <0x000ec000 0x00008000>;
		};

		boot_partition: partition@f4000 {
		    reg = <0x000f4000 0x0000c000>;
		};
	};
};

